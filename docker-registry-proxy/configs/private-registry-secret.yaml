# 私有Docker Registry认证Secret配置
# 用于配置访问私有Docker Registry的认证信息

apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
  labels:
    app: registry-proxy
    component: auth
type: kubernetes.io/dockerconfigjson
data:
  # Base64编码的Docker配置JSON
  # 使用以下命令生成：
  # kubectl create secret docker-registry registry-secret \
  #   --docker-server=registry.company.com \
  #   --docker-username=myuser \
  #   --docker-password=mypass \
  #   --docker-email=user@company.com \
  #   --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6Im15dXNlciIsInBhc3N3b3JkIjoibXlwYXNzIiwiZW1haWwiOiJ1c2VyQGNvbXBhbnkuY29tIiwiYXV0aCI6ImJYbDFjMlZ5T20xNWNHRnpjdz09In19fQ==

---
# 多个Registry的认证配置示例
apiVersion: v1
kind: Secret
metadata:
  name: multi-registry-secret
  namespace: default
  labels:
    app: registry-proxy
    component: auth
type: kubernetes.io/dockerconfigjson
data:
  # 支持多个Registry的认证配置
  # Docker配置JSON格式：
  # {
  #   "auths": {
  #     "registry.company.com": {
  #       "username": "myuser",
  #       "password": "mypass",
  #       "email": "user@company.com",
  #       "auth": "base64(username:password)"
  #     },
  #     "harbor.company.com": {
  #       "username": "harboruser",
  #       "password": "harborpass",
  #       "email": "harbor@company.com",
  #       "auth": "base64(harboruser:harborpass)"
  #     },
  #     "nexus.company.com:8082": {
  #       "username": "nexususer",
  #       "password": "nexuspass",
  #       "email": "nexus@company.com",
  #       "auth": "base64(nexususer:nexuspass)"
  #     }
  #   }
  # }
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6Im15dXNlciIsInBhc3N3b3JkIjoibXlwYXNzIiwiZW1haWwiOiJ1c2VyQGNvbXBhbnkuY29tIiwiYXV0aCI6ImJYbDFjMlZ5T20xNWNHRnpjdz09In0sImhhcmJvci5jb21wYW55LmNvbSI6eyJ1c2VybmFtZSI6ImhhcmJvcnVzZXIiLCJwYXNzd29yZCI6ImhhcmJvcnBhc3MiLCJlbWFpbCI6ImhhcmJvckBjb21wYW55LmNvbSIsImF1dGgiOiJhR0Z5WW05eWRYTmxjanBvWVhKaWIzSndZWE56In0sIm5leHVzLmNvbXBhbnkuY29tOjgwODIiOnsidXNlcm5hbWUiOiJuZXh1c3VzZXIiLCJwYXNzd29yZCI6Im5leHVzcGFzcyIsImVtYWlsIjoibmV4dXNAY29tcGFueS5jb20iLCJhdXRoIjoiYm1WNGRYTjFjMlZ5T201bGVIVnpjR0Z6Y3c9PSJ9fX0=

---
# ServiceAccount配置，用于Pod自动使用Registry认证
apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-service-account
  namespace: default
  labels:
    app: registry-proxy
    component: serviceaccount
imagePullSecrets:
  - name: registry-secret
  - name: multi-registry-secret

---
# 用于Registry代理的ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: registry-proxy-sa
  namespace: default
  labels:
    app: registry-proxy
    component: proxy
imagePullSecrets:
  - name: registry-secret

---
# RBAC配置 - ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: registry-proxy-role
  labels:
    app: registry-proxy
    component: rbac
rules:
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]

---
# RBAC配置 - ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: registry-proxy-binding
  labels:
    app: registry-proxy
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: registry-proxy-role
subjects:
  - kind: ServiceAccount
    name: registry-proxy-sa
    namespace: default

---
# 用于存储Registry代理配置的ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-proxy-config
  namespace: default
  labels:
    app: registry-proxy
    component: config
data:
  # Docker daemon配置
  daemon.json: |
    {
      "registry-mirrors": [
        "https://dockerhub.azk8s.cn",
        "https://docker.mirrors.ustc.edu.cn",
        "https://hub-mirror.c.163.com",
        "https://mirror.baidubce.com"
      ],
      "insecure-registries": [
        "localhost:5000",
        "registry.local:5000",
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16"
      ],
      "proxies": {
        "default": {
          "httpProxy": "http://proxy.company.com:8080",
          "httpsProxy": "http://proxy.company.com:8080",
          "noProxy": "localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,*.local,*.internal"
        }
      }
    }
  
  # Registry hosts配置
  hosts.toml: |
    # Registry镜像配置
    [host."https://dockerhub.azk8s.cn"]
      capabilities = ["pull", "resolve"]
    [host."https://docker.mirrors.ustc.edu.cn"]  
      capabilities = ["pull", "resolve"]
    [host."https://hub-mirror.c.163.com"]
      capabilities = ["pull", "resolve"]
    [host."https://mirror.baidubce.com"]
      capabilities = ["pull", "resolve"]
    
    # 私有Registry配置
    [host."http://registry.company.com"]
      capabilities = ["pull", "resolve", "push"]
      ca = "/etc/ssl/certs/ca-certificates.crt"
    
    [host."http://localhost:5000"]
      capabilities = ["pull", "resolve", "push"]
      skip_verify = true
  
  # 环境变量配置
  proxy.env: |
    HTTP_PROXY=http://proxy.company.com:8080
    HTTPS_PROXY=http://proxy.company.com:8080
    NO_PROXY=localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,*.local,*.internal
