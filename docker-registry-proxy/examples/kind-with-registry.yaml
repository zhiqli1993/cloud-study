# Kind集群配置 - 支持本地Docker Registry代理
# 此配置创建一个支持本地Registry代理的Kind集群

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

# 集群名称
name: registry-proxy-cluster

# 网络配置
networking:
  # API服务器端口
  apiServerPort: 6443
  
  # 服务子网
  serviceSubnet: "10.96.0.0/16"
  
  # Pod子网
  podSubnet: "10.244.0.0/16"
  
  # 禁用默认CNI（如果需要自定义CNI）
  disableDefaultCNI: false
  
  # Kube-proxy模式
  kubeProxyMode: "iptables"

# 节点配置
nodes:
  # 控制平面节点
  - role: control-plane
    image: kindest/node:v1.28.0
    
    # 端口映射配置
    extraPortMappings:
      # HTTP端口（用于Ingress）
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      # HTTPS端口（用于Ingress）
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      # Registry代理端口
      - containerPort: 30500
        hostPort: 5000
        protocol: TCP
      # Registry管理端口
      - containerPort: 30501
        hostPort: 5001
        protocol: TCP
    
    # 节点标签
    labels:
      ingress-ready: "true"
      registry-proxy: "true"
    
    # 挂载配置
    extraMounts:
      # 挂载本地Docker配置
      - hostPath: /etc/docker
        containerPath: /etc/docker
        readOnly: true
        selinuxRelabel: false
        propagation: HostToContainer
      # 挂载本地containerd配置
      - hostPath: /etc/containerd
        containerPath: /etc/containerd
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional
      # 挂载Registry数据目录
      - hostPath: /tmp/registry-data
        containerPath: /var/lib/registry
        readOnly: false
    
    # Kubeadm配置补丁
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true,registry-proxy=true"
      - |
        kind: KubeProxyConfiguration
        metricsBindAddress: 0.0.0.0:10249

  # 工作节点1
  - role: worker
    image: kindest/node:v1.28.0
    labels:
      registry-proxy: "true"
    extraMounts:
      # 挂载本地containerd配置
      - hostPath: /etc/containerd
        containerPath: /etc/containerd
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional

  # 工作节点2（可选）
  - role: worker
    image: kindest/node:v1.28.0
    labels:
      registry-proxy: "true"
    extraMounts:
      # 挂载本地containerd配置
      - hostPath: /etc/containerd
        containerPath: /etc/containerd
        readOnly: false
        selinuxRelabel: false
        propagation: Bidirectional

# containerd配置补丁
containerdConfigPatches:
  - |-
    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = "/etc/containerd/certs.d"
    
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
        endpoint = [
          "http://registry-proxy.default.svc.cluster.local:5000",
          "https://dockerhub.azk8s.cn",
          "https://docker.mirrors.ustc.edu.cn"
        ]
      
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5000"]
        endpoint = ["http://localhost:5000"]
      
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.local:5000"]
        endpoint = ["http://host.docker.internal:5000"]

# kubeadm配置补丁
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        enable-admission-plugins: NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook
        audit-log-path: /var/log/audit.log
        audit-log-maxage: "30"
        audit-log-maxbackup: "3"
        audit-log-maxsize: "100"
      extraVolumes:
        - name: audit-logs
          hostPath: /var/log/kubernetes/audit
          mountPath: /var/log
          readOnly: false
    etcd:
      local:
        dataDir: /var/lib/etcd
        extraArgs:
          listen-metrics-urls: http://0.0.0.0:2381
    controllerManager:
      extraArgs:
        bind-address: 0.0.0.0
    scheduler:
      extraArgs:
        bind-address: 0.0.0.0
    dns:
      type: CoreDNS
  - |
    kind: KubeletConfiguration
    serverTLSBootstrap: true
    cgroupDriver: systemd
    # Registry相关配置
    imageGCHighThresholdPercent: 85
    imageGCLowThresholdPercent: 80
    # 允许不安全的Registry
    insecureSkipTLSVerify: true

# 功能开关配置
featureGates:
  # 启用容器运行时特性
  "EphemeralContainers": true
  "CSIMigration": true
  # Registry相关特性
  "PodReadinessGates": true
  "ServiceTopology": true

# 运行时配置
runtimeConfig:
  "api/all": "true"

---
# Registry hosts配置文件模板
# 需要在集群节点上创建 /etc/containerd/certs.d/docker.io/hosts.toml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-hosts-config
  namespace: kube-system
data:
  docker.io.hosts.toml: |
    server = "https://registry-1.docker.io"
    
    [host."http://registry-proxy.default.svc.cluster.local:5000"]
      capabilities = ["pull", "resolve"]
      skip_verify = true
    
    [host."https://dockerhub.azk8s.cn"]
      capabilities = ["pull", "resolve"]
    
    [host."https://docker.mirrors.ustc.edu.cn"]
      capabilities = ["pull", "resolve"]
  
  localhost_5000.hosts.toml: |
    server = "http://localhost:5000"
    
    [host."http://localhost:5000"]
      capabilities = ["pull", "resolve", "push"]
      skip_verify = true
  
  registry_local_5000.hosts.toml: |
    server = "http://registry.local:5000"
    
    [host."http://host.docker.internal:5000"]
      capabilities = ["pull", "resolve", "push"]
      skip_verify = true

---
# DaemonSet用于配置节点Registry hosts
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: registry-hosts-configurator
  namespace: kube-system
  labels:
    app: registry-hosts-configurator
spec:
  selector:
    matchLabels:
      app: registry-hosts-configurator
  template:
    metadata:
      labels:
        app: registry-hosts-configurator
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - name: configurator
        image: alpine:3.18
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Configuring registry hosts..."
          
          # 创建containerd certs.d目录
          mkdir -p /host/etc/containerd/certs.d/docker.io
          mkdir -p /host/etc/containerd/certs.d/localhost:5000
          mkdir -p /host/etc/containerd/certs.d/registry.local:5000
          
          # 复制hosts配置文件
          cp /config/docker.io.hosts.toml /host/etc/containerd/certs.d/docker.io/hosts.toml
          cp /config/localhost_5000.hosts.toml /host/etc/containerd/certs.d/localhost:5000/hosts.toml
          cp /config/registry_local_5000.hosts.toml /host/etc/containerd/certs.d/registry.local:5000/hosts.toml
          
          echo "Registry hosts configuration completed"
          
          # 保持容器运行
          while true; do
            sleep 3600
          done
        volumeMounts:
        - name: host-etc
          mountPath: /host/etc
        - name: config
          mountPath: /config
        securityContext:
          privileged: true
      volumes:
      - name: host-etc
        hostPath:
          path: /etc
          type: Directory
      - name: config
        configMap:
          name: registry-hosts-config
      tolerations:
      - operator: Exists
        effect: NoSchedule
      - operator: Exists
        effect: NoExecute
