# 测试Pod配置示例
# 用于验证Registry代理功能和镜像拉取

apiVersion: v1
kind: Pod
metadata:
  name: registry-test-pod
  namespace: default
  labels:
    app: registry-test
    test: true
spec:
  restartPolicy: Never
  serviceAccountName: registry-service-account
  containers:
    - name: registry-test-container
      image: alpine:3.18
      command:
        - /bin/sh
        - -c
        - |
          echo "=== Registry代理测试开始 ==="
          echo "Pod名称: $HOSTNAME"
          echo "时间: $(date)"
          echo ""
          
          # 测试基本命令
          echo "=== 基本环境测试 ==="
          echo "Alpine版本: $(cat /etc/alpine-release)"
          echo "网络配置:"
          ip addr show eth0 || true
          echo ""
          
          # 测试DNS解析
          echo "=== DNS解析测试 ==="
          nslookup registry-proxy.default.svc.cluster.local || true
          nslookup dockerhub.azk8s.cn || true
          echo ""
          
          # 测试Registry连接
          echo "=== Registry连接测试 ==="
          if command -v wget &> /dev/null; then
            echo "使用wget测试Registry连接..."
            wget -O- --timeout=10 http://registry-proxy.default.svc.cluster.local:5000/v2/ || true
          else
            echo "wget不可用，跳过连接测试"
          fi
          echo ""
          
          # 等待时间，方便查看日志
          echo "=== 测试完成，等待60秒后退出 ==="
          sleep 60
          echo "测试Pod执行完成"
      
      # 环境变量配置
      env:
        - name: REGISTRY_PROXY_URL
          value: "http://registry-proxy.default.svc.cluster.local:5000"
        - name: HTTP_PROXY
          valueFrom:
            configMapKeyRef:
              name: registry-proxy-config
              key: http_proxy
              optional: true
        - name: HTTPS_PROXY
          valueFrom:
            configMapKeyRef:
              name: registry-proxy-config
              key: https_proxy
              optional: true
        - name: NO_PROXY
          valueFrom:
            configMapKeyRef:
              name: registry-proxy-config
              key: no_proxy
              optional: true
      
      # 资源限制
      resources:
        requests:
          cpu: 10m
          memory: 16Mi
        limits:
          cpu: 100m
          memory: 128Mi
      
      # 安全上下文
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
  
  # Pod安全上下文
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
  
  # 镜像拉取策略
  imagePullSecrets:
    - name: registry-secret

---
# 测试Job配置示例
# 用于自动化测试Registry代理功能

apiVersion: batch/v1
kind: Job
metadata:
  name: registry-test-job
  namespace: default
  labels:
    app: registry-test
    component: job
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: registry-test
        component: job
    spec:
      restartPolicy: Never
      serviceAccountName: registry-service-account
      containers:
        - name: registry-test
          image: curlimages/curl:8.5.0
          command:
            - /bin/sh
            - -c
            - |
              echo "=== Registry代理自动化测试 ==="
              echo "开始时间: $(date)"
              
              # 定义测试函数
              test_endpoint() {
                local name="$1"
                local url="$2"
                echo "测试 $name: $url"
                if curl -s -f --connect-timeout 10 --max-time 30 "$url" > /dev/null; then
                  echo "✓ $name 测试通过"
                  return 0
                else
                  echo "✗ $name 测试失败"
                  return 1
                fi
              }
              
              # 测试计数器
              total_tests=0
              passed_tests=0
              
              # 测试Registry API
              total_tests=$((total_tests + 1))
              if test_endpoint "Registry API" "http://registry-proxy.default.svc.cluster.local:5000/v2/"; then
                passed_tests=$((passed_tests + 1))
              fi
              
              # 测试Registry Catalog
              total_tests=$((total_tests + 1))
              if test_endpoint "Registry Catalog" "http://registry-proxy.default.svc.cluster.local:5000/v2/_catalog"; then
                passed_tests=$((passed_tests + 1))
              fi
              
              # 测试Metrics端点
              total_tests=$((total_tests + 1))
              if test_endpoint "Registry Metrics" "http://registry-proxy.default.svc.cluster.local:5001/metrics"; then
                passed_tests=$((passed_tests + 1))
              fi
              
              # 测试外部Registry（如果配置了代理）
              if [ -n "${HTTP_PROXY:-}" ]; then
                echo ""
                echo "=== 外部Registry测试（通过代理） ==="
                total_tests=$((total_tests + 1))
                if test_endpoint "Docker Hub (via proxy)" "https://registry-1.docker.io/v2/"; then
                  passed_tests=$((passed_tests + 1))
                fi
                
                total_tests=$((total_tests + 1))
                if test_endpoint "Docker Hub Mirror" "https://dockerhub.azk8s.cn/v2/"; then
                  passed_tests=$((passed_tests + 1))
                fi
              fi
              
              # 输出测试结果
              echo ""
              echo "=== 测试结果汇总 ==="
              echo "总测试数: $total_tests"
              echo "通过测试: $passed_tests"
              echo "失败测试: $((total_tests - passed_tests))"
              echo "结束时间: $(date)"
              
              # 根据测试结果设置退出码
              if [ $passed_tests -eq $total_tests ]; then
                echo "✓ 所有测试通过"
                exit 0
              elif [ $passed_tests -gt 0 ]; then
                echo "⚠ 部分测试通过"
                exit 1
              else
                echo "✗ 所有测试失败"
                exit 2
              fi
          
          env:
            - name: HTTP_PROXY
              valueFrom:
                configMapKeyRef:
                  name: registry-proxy-config
                  key: http_proxy
                  optional: true
            - name: HTTPS_PROXY
              valueFrom:
                configMapKeyRef:
                  name: registry-proxy-config
                  key: https_proxy
                  optional: true
            - name: NO_PROXY
              valueFrom:
                configMapKeyRef:
                  name: registry-proxy-config
                  key: no_proxy
                  optional: true
          
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 100m
              memory: 64Mi
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
      
      imagePullSecrets:
        - name: registry-secret

---
# 测试CronJob配置示例
# 用于定期检查Registry代理健康状态

apiVersion: batch/v1
kind: CronJob
metadata:
  name: registry-health-check
  namespace: default
  labels:
    app: registry-test
    component: health-check
spec:
  schedule: "*/10 * * * *"  # 每10分钟执行一次
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 60
      template:
        metadata:
          labels:
            app: registry-test
            component: health-check
        spec:
          restartPolicy: Never
          serviceAccountName: registry-service-account
          containers:
            - name: health-check
              image: curlimages/curl:8.5.0
              command:
                - /bin/sh
                - -c
                - |
                  echo "=== Registry健康检查 $(date) ==="
                  
                  # 检查Registry API
                  if curl -s -f --connect-timeout 5 --max-time 10 \
                    http://registry-proxy.default.svc.cluster.local:5000/v2/ > /dev/null; then
                    echo "✓ Registry API健康"
                  else
                    echo "✗ Registry API异常"
                    exit 1
                  fi
                  
                  # 检查Metrics端点
                  if curl -s -f --connect-timeout 5 --max-time 10 \
                    http://registry-proxy.default.svc.cluster.local:5001/metrics > /dev/null; then
                    echo "✓ Metrics端点健康"
                  else
                    echo "⚠ Metrics端点异常"
                  fi
                  
                  echo "✓ Registry代理健康检查完成"
              
              resources:
                requests:
                  cpu: 5m
                  memory: 8Mi
                limits:
                  cpu: 50m
                  memory: 32Mi
              
              securityContext:
                runAsNonRoot: true
                runAsUser: 65534
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL

---
# 测试Service配置示例
# 用于内部测试的临时服务

apiVersion: v1
kind: Service
metadata:
  name: registry-test-service
  namespace: default
  labels:
    app: registry-test
    component: service
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: registry-test
    component: mock-server

---
# Mock服务器Pod配置示例
# 用于模拟Registry服务器进行测试

apiVersion: v1
kind: Pod
metadata:
  name: registry-mock-server
  namespace: default
  labels:
    app: registry-test
    component: mock-server
spec:
  restartPolicy: Never
  containers:
    - name: mock-server
      image: httpd:2.4-alpine
      ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      
      command:
        - /bin/sh
        - -c
        - |
          echo "启动Mock Registry服务器..."
          
          # 创建基本的Registry API响应
          mkdir -p /usr/local/apache2/htdocs/v2
          echo '{}' > /usr/local/apache2/htdocs/v2/index.html
          echo '{"repositories":[]}' > /usr/local/apache2/htdocs/v2/_catalog
          
          # 配置Apache
          cat > /usr/local/apache2/conf/httpd.conf << 'EOF'
          ServerRoot "/usr/local/apache2"
          Listen 8080
          
          LoadModule mpm_event_module modules/mod_mpm_event.so
          LoadModule authz_core_module modules/mod_authz_core.so
          LoadModule dir_module modules/mod_dir.so
          LoadModule mime_module modules/mod_mime.so
          LoadModule rewrite_module modules/mod_rewrite.so
          
          <Directory />
              AllowOverride none
              Require all denied
          </Directory>
          
          DocumentRoot "/usr/local/apache2/htdocs"
          
          <Directory "/usr/local/apache2/htdocs">
              Options Indexes FollowSymLinks
              AllowOverride None
              Require all granted
          </Directory>
          
          DirectoryIndex index.html
          
          ErrorLog /proc/self/fd/2
          LogLevel warn
          CustomLog /proc/self/fd/1 common
          EOF
          
          echo "Mock Registry服务器配置完成，启动服务..."
          exec httpd-foreground
      
      resources:
        requests:
          cpu: 10m
          memory: 16Mi
        limits:
          cpu: 100m
          memory: 64Mi
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 33  # www-data user
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
