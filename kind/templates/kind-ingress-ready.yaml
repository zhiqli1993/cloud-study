# Kind Ingress-Ready Configuration Template
# This template creates a cluster optimized for ingress controllers
# Pre-configured with necessary port mappings and labels

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

name: ingress-cluster

networking:
  apiServerPort: 6443
  serviceSubnet: "10.96.0.0/16"
  podSubnet: "10.244.0.0/16"
  disableDefaultCNI: false
  kubeProxyMode: "iptables"

nodes:
  - role: control-plane
    image: kindest/node:v1.28.0
    
    # Essential port mappings for ingress
    extraPortMappings:
      # HTTP
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      # HTTPS
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      # Additional ports for services
      - containerPort: 8080
        hostPort: 8080
        protocol: TCP
      - containerPort: 8443
        hostPort: 8443
        protocol: TCP
      # NodePort range
      - containerPort: 30000
        hostPort: 30000
        protocol: TCP
      - containerPort: 30001
        hostPort: 30001
        protocol: TCP
      - containerPort: 30002
        hostPort: 30002
        protocol: TCP
    
    labels:
      ingress-ready: "true"
      node-type: control-plane
      environment: development
    
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
            system-reserved: "cpu=100m,memory=100Mi"
      - |
        kind: ClusterConfiguration
        apiServer:
          extraArgs:
            enable-admission-plugins: NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook
        controllerManager:
          extraArgs:
            bind-address: 0.0.0.0
        scheduler:
          extraArgs:
            bind-address: 0.0.0.0

  - role: worker
    image: kindest/node:v1.28.0
    labels:
      node-type: worker
      environment: development

# Container runtime configuration - 国内镜像源配置
containerdConfigPatches:
- |
  version = 2
  [plugins."io.containerd.grpc.v1.cri".registry]
    config_path = ""
    
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
        endpoint = [
          "https://docker.1ms.run",
          "https://dockerhub.azk8s.cn",
          "https://docker.anyhub.us.kg",
          "https://dockerhub.jobcher.com",
          "https://dockerhub.icu",
          "https://registry-1.docker.io"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]
        endpoint = [
          "https://k8s-gcr.azk8s.cn",
          "https://registry.aliyuncs.com/k8sxio"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.k8s.io"]
        endpoint = [
          "https://k8s-gcr.azk8s.cn",
          "https://registry.aliyuncs.com/k8sxio"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."gcr.io"]
        endpoint = [
          "https://gcr.azk8s.cn",
          "https://registry.aliyuncs.com"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."quay.io"]
        endpoint = [
          "https://quay.azk8s.cn",
          "https://quay-mirror.qiniu.com"
        ]
        
    [plugins."io.containerd.grpc.v1.cri".registry.configs]
      [plugins."io.containerd.grpc.v1.cri".registry.configs."dockerhub.azk8s.cn".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."docker.mirrors.ustc.edu.cn".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."hub-mirror.c.163.com".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.docker-cn.com".tls]
        insecure_skip_verify = false

# Usage and Setup Instructions:
# 
# 1. Create the cluster:
#    kind create cluster --config=kind-ingress-ready.yaml
#
# 2. Install NGINX Ingress Controller:
#    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
#
# 3. Wait for ingress controller to be ready:
#    kubectl wait --namespace ingress-nginx \
#      --for=condition=ready pod \
#      --selector=app.kubernetes.io/component=controller \
#      --timeout=90s
#
# 4. Test ingress setup:
#    # Create a simple deployment and service
#    kubectl create deployment hello-world --image=gcr.io/google-samples/hello-app:1.0
#    kubectl expose deployment hello-world --port=8080
#    
#    # Create ingress resource
#    kubectl apply -f - <<EOF
#    apiVersion: networking.k8s.io/v1
#    kind: Ingress
#    metadata:
#      name: hello-world-ingress
#    spec:
#      rules:
#      - host: hello-world.local
#        http:
#          paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: hello-world
#                port:
#                  number: 8080
#    EOF
#
# 5. Test access (add to /etc/hosts: 127.0.0.1 hello-world.local):
#    curl http://hello-world.local
#
# Alternative Ingress Controllers:
# - Traefik: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
# - Istio: Follow Istio installation guide for Kind
# - Contour: kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
