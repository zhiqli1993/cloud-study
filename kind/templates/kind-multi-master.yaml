# Kind Multi-Master Configuration Template
# This template creates a highly available cluster with multiple control-plane nodes
# Suitable for production-like testing and HA scenarios

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

name: multi-master-cluster

networking:
  apiServerPort: 6443
  serviceSubnet: "10.96.0.0/16"
  podSubnet: "10.244.0.0/16"
  disableDefaultCNI: false
  kubeProxyMode: "iptables"

nodes:
  # Control plane node 1
  - role: control-plane
    image: kindest/node:v1.28.0
    labels:
      node-type: control-plane
      environment: production
      master-node: "1"
    
    # Only first control-plane needs port mappings for external access
    extraPortMappings:
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        protocol: TCP
      - containerPort: 30000
        hostPort: 30000
        protocol: TCP
    
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
      - |
        kind: ClusterConfiguration
        apiServer:
          extraArgs:
            enable-admission-plugins: NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook
            audit-log-path: /var/log/audit.log
            audit-log-maxage: "30"
        controllerManager:
          extraArgs:
            bind-address: 0.0.0.0
        scheduler:
          extraArgs:
            bind-address: 0.0.0.0
        etcd:
          local:
            dataDir: /var/lib/etcd

  # Control plane node 2
  - role: control-plane
    image: kindest/node:v1.28.0
    labels:
      node-type: control-plane
      environment: production
      master-node: "2"

  # Control plane node 3
  - role: control-plane
    image: kindest/node:v1.28.0
    labels:
      node-type: control-plane
      environment: production
      master-node: "3"

  # Worker node 1
  - role: worker
    image: kindest/node:v1.28.0
    labels:
      node-type: worker
      environment: production
      worker-node: "1"

  # Worker node 2
  - role: worker
    image: kindest/node:v1.28.0
    labels:
      node-type: worker
      environment: production
      worker-node: "2"

  # Worker node 3
  - role: worker
    image: kindest/node:v1.28.0
    labels:
      node-type: worker
      environment: production
      worker-node: "3"

# Feature gates for production-like features
featureGates:
  "EphemeralContainers": true
  "CSIMigration": true
  "ServerSideApply": true

# Global kubeadm config patches
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    etcd:
      local:
        dataDir: /var/lib/etcd
        serverCertSANs:
          - localhost
          - 127.0.0.1
    apiServer:
      certSANs:
        - localhost
        - 127.0.0.1
  - |
    kind: KubeletConfiguration
    serverTLSBootstrap: true
    cgroupDriver: systemd
    systemReserved:
      cpu: "100m"
      memory: "100Mi"
    kubeReserved:
      cpu: "100m"
      memory: "100Mi"

# Container runtime configuration - 国内镜像源配置
containerdConfigPatches:
- |
  version = 2
  [plugins."io.containerd.grpc.v1.cri".registry]
    config_path = ""
    
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
        endpoint = [
          "https://docker.1ms.run",
          "https://dockerhub.azk8s.cn",
          "https://docker.anyhub.us.kg",
          "https://dockerhub.jobcher.com",
          "https://dockerhub.icu",
          "https://registry-1.docker.io"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]
        endpoint = [
          "https://k8s-gcr.azk8s.cn",
          "https://registry.aliyuncs.com/k8sxio"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.k8s.io"]
        endpoint = [
          "https://k8s-gcr.azk8s.cn",
          "https://registry.aliyuncs.com/k8sxio"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."gcr.io"]
        endpoint = [
          "https://gcr.azk8s.cn",
          "https://registry.aliyuncs.com"
        ]
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."quay.io"]
        endpoint = [
          "https://quay.azk8s.cn",
          "https://quay-mirror.qiniu.com"
        ]
        
    [plugins."io.containerd.grpc.v1.cri".registry.configs]
      [plugins."io.containerd.grpc.v1.cri".registry.configs."dockerhub.azk8s.cn".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."docker.mirrors.ustc.edu.cn".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."hub-mirror.c.163.com".tls]
        insecure_skip_verify = false
      [plugins."io.containerd.grpc.v1.cri".registry.configs."registry.docker-cn.com".tls]
        insecure_skip_verify = false

# Usage:
# kind create cluster --config=kind-multi-master.yaml
# kubectl get nodes -o wide
# kubectl get pods -n kube-system

# Verify HA setup:
# kubectl get endpoints kubernetes -n default
# kubectl get pods -n kube-system | grep etcd
