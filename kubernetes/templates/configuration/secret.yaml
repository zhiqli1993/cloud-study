apiVersion: v1
kind: Secret
metadata:
  name: ${SECRET_NAME:-${APP_NAME:-my-app}-secret}
  namespace: ${NAMESPACE:-default}
  labels:
    app: ${APP_NAME:-my-app}
    version: ${APP_VERSION:-v1.0.0}
    environment: ${ENVIRONMENT:-development}
    tier: ${TIER:-backend}
    component: ${COMPONENT:-secret}
  annotations:
    kubernetes.io/description: "Secret data for ${APP_NAME:-my-app}"
    secret.kubernetes.io/managed-by: "kubectl"
type: ${SECRET_TYPE:-Opaque}
data:
  # 数据库凭据 (Base64 编码)
  database-username: ${DB_USERNAME_BASE64:-dXNlcm5hbWU=}  # username
  database-password: ${DB_PASSWORD_BASE64:-cGFzc3dvcmQ=}  # password
  database-url: ${DB_URL_BASE64:-cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NTQzMi9teWFwcA==}  # postgresql://user:pass@localhost:5432/myapp
  
  # API 密钥
  api-key: ${API_KEY_BASE64:-YXBpLWtleS0xMjM0NTY=}  # api-key-123456
  api-secret: ${API_SECRET_BASE64:-YXBpLXNlY3JldC1hYmNkZWY=}  # api-secret-abcdef
  
  # JWT 密钥
  jwt-secret: ${JWT_SECRET_BASE64:-and0LXNlY3JldC1zdXBlci1zZWN1cmUtMTIzNDU2Nzg5MA==}  # jwt-secret-super-secure-1234567890
  jwt-private-key: ${JWT_PRIVATE_KEY_BASE64:-}  # RSA private key for JWT signing
  jwt-public-key: ${JWT_PUBLIC_KEY_BASE64:-}    # RSA public key for JWT verification
  
  # OAuth 配置
  oauth-client-id: ${OAUTH_CLIENT_ID_BASE64:-b2F1dGgtY2xpZW50LWlk}  # oauth-client-id
  oauth-client-secret: ${OAUTH_CLIENT_SECRET_BASE64:-b2F1dGgtY2xpZW50LXNlY3JldA==}  # oauth-client-secret
  
  # Redis 凭据
  redis-password: ${REDIS_PASSWORD_BASE64:-cmVkaXMtcGFzc3dvcmQ=}  # redis-password
  redis-url: ${REDIS_URL_BASE64:-cmVkaXM6Ly86cmVkaXMtcGFzc3dvcmRAbG9jYWxob3N0OjYzNzk=}  # redis://:redis-password@localhost:6379
  
  # 外部服务凭据
  aws-access-key-id: ${AWS_ACCESS_KEY_ID_BASE64:-}
  aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY_BASE64:-}
  aws-session-token: ${AWS_SESSION_TOKEN_BASE64:-}
  
  # Google Cloud 服务账户
  gcp-service-account-key: ${GCP_SERVICE_ACCOUNT_KEY_BASE64:-}
  
  # 证书和密钥
  tls-cert: ${TLS_CERT_BASE64:-}     # TLS certificate
  tls-key: ${TLS_KEY_BASE64:-}       # TLS private key
  ca-cert: ${CA_CERT_BASE64:-}       # Certificate Authority certificate
  
  # 应用特定密钥
  encryption-key: ${ENCRYPTION_KEY_BASE64:-ZW5jcnlwdGlvbi1rZXktMTIzNDU2Nzg5MA==}  # encryption-key-1234567890
  session-secret: ${SESSION_SECRET_BASE64:-c2Vzc2lvbi1zZWNyZXQtYWJjZGVmZ2hpag==}  # session-secret-abcdefghij
  
  # SMTP 配置
  smtp-username: ${SMTP_USERNAME_BASE64:-c210cC11c2VybmFtZQ==}  # smtp-username
  smtp-password: ${SMTP_PASSWORD_BASE64:-c210cC1wYXNzd29yZA==}  # smtp-password
  
  # 监控和日志
  grafana-admin-password: ${GRAFANA_ADMIN_PASSWORD_BASE64:-YWRtaW4xMjM=}  # admin123
  prometheus-basic-auth: ${PROMETHEUS_BASIC_AUTH_BASE64:-YWRtaW46cGFzc3dvcmQ=}  # admin:password
  
  # 第三方集成
  slack-webhook-url: ${SLACK_WEBHOOK_URL_BASE64:-}
  github-token: ${GITHUB_TOKEN_BASE64:-}
  docker-registry-auth: ${DOCKER_REGISTRY_AUTH_BASE64:-}

stringData:
  # 使用 stringData 可以直接提供明文字符串，Kubernetes 会自动进行 Base64 编码
  # 开发环境配置
  development.env: |
    DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@localhost:5432/myapp_dev}
    REDIS_URL=${REDIS_URL:-redis://localhost:6379/0}
    JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-not-for-production}
    API_KEY=${API_KEY:-dev-api-key}
    ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key}
  
  # 生产环境配置
  production.env: |
    DATABASE_URL=${PROD_DATABASE_URL:-}
    REDIS_URL=${PROD_REDIS_URL:-}
    JWT_SECRET=${PROD_JWT_SECRET:-}
    API_KEY=${PROD_API_KEY:-}
    ENCRYPTION_KEY=${PROD_ENCRYPTION_KEY:-}
  
  # 应用配置文件
  app-secrets.yml: |
    database:
      host: ${DB_HOST:-localhost}
      port: ${DB_PORT:-5432}
      username: ${DB_USERNAME:-user}
      password: ${DB_PASSWORD:-password}
      database: ${DB_NAME:-myapp}
      ssl_mode: ${DB_SSL_MODE:-require}
    
    cache:
      redis:
        url: ${REDIS_URL:-redis://localhost:6379}
        password: ${REDIS_PASSWORD:-}
        db: ${REDIS_DB:-0}
    
    security:
      jwt:
        secret: ${JWT_SECRET:-super-secret-jwt-key}
        expiration: ${JWT_EXPIRATION:-3600}
      
      oauth:
        google:
          client_id: ${GOOGLE_CLIENT_ID:-}
          client_secret: ${GOOGLE_CLIENT_SECRET:-}
        github:
          client_id: ${GITHUB_CLIENT_ID:-}
          client_secret: ${GITHUB_CLIENT_SECRET:-}
    
    external_services:
      aws:
        access_key_id: ${AWS_ACCESS_KEY_ID:-}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY:-}
        region: ${AWS_REGION:-us-west-2}
      
      smtp:
        host: ${SMTP_HOST:-smtp.gmail.com}
        port: ${SMTP_PORT:-587}
        username: ${SMTP_USERNAME:-}
        password: ${SMTP_PASSWORD:-}
        tls: ${SMTP_TLS:-true}
      
      monitoring:
        grafana:
          admin_password: ${GRAFANA_ADMIN_PASSWORD:-admin123}
        
        prometheus:
          basic_auth: ${PROMETHEUS_BASIC_AUTH:-admin:password}
  
  # Docker 镜像仓库认证
  .dockerconfigjson: |
    {
      "auths": {
        "${DOCKER_REGISTRY:-docker.io}": {
          "username": "${DOCKER_USERNAME:-}",
          "password": "${DOCKER_PASSWORD:-}",
          "email": "${DOCKER_EMAIL:-}",
          "auth": "${DOCKER_AUTH_BASE64:-}"
        },
        "ghcr.io": {
          "username": "${GITHUB_USERNAME:-}",
          "password": "${GITHUB_TOKEN:-}",
          "email": "${GITHUB_EMAIL:-}",
          "auth": "${GITHUB_AUTH_BASE64:-}"
        }
      }
    }
