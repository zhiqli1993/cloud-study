apiVersion: v1
kind: ConfigMap
metadata:
  name: ${CONFIG_MAP_NAME:-${APP_NAME:-my-app}-config}
  namespace: ${NAMESPACE:-default}
  labels:
    app: ${APP_NAME:-my-app}
    version: ${APP_VERSION:-v1.0.0}
    environment: ${ENVIRONMENT:-development}
    tier: ${TIER:-backend}
    component: ${COMPONENT:-config}
  annotations:
    kubernetes.io/description: "Configuration data for ${APP_NAME:-my-app}"
    config.kubernetes.io/local-config: "true"
data:
  # 应用配置
  app.properties: |
    # Application Configuration
    app.name=${APP_NAME:-my-app}
    app.version=${APP_VERSION:-v1.0.0}
    app.environment=${ENVIRONMENT:-development}
    app.debug=${DEBUG_MODE:-false}
    app.log.level=${LOG_LEVEL:-info}
    app.log.format=${LOG_FORMAT:-json}
    
    # Server Configuration
    server.port=${SERVER_PORT:-8080}
    server.host=${SERVER_HOST:-0.0.0.0}
    server.timeout=${SERVER_TIMEOUT:-30}
    server.max-connections=${MAX_CONNECTIONS:-1000}
    
    # Database Configuration
    database.host=${DB_HOST:-localhost}
    database.port=${DB_PORT:-5432}
    database.name=${DB_NAME:-myapp}
    database.pool.min=${DB_POOL_MIN:-5}
    database.pool.max=${DB_POOL_MAX:-20}
    database.timeout=${DB_TIMEOUT:-30}
    
    # Cache Configuration
    cache.enabled=${CACHE_ENABLED:-true}
    cache.ttl=${CACHE_TTL:-3600}
    cache.max-size=${CACHE_MAX_SIZE:-1000}
    
    # Security Configuration
    security.enabled=${SECURITY_ENABLED:-true}
    security.jwt.expiration=${JWT_EXPIRATION:-3600}
    security.cors.enabled=${CORS_ENABLED:-true}
    security.rate-limit.enabled=${RATE_LIMIT_ENABLED:-true}
    security.rate-limit.requests=${RATE_LIMIT_REQUESTS:-100}
    security.rate-limit.window=${RATE_LIMIT_WINDOW:-60}

  # Nginx 配置
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections ${NGINX_WORKER_CONNECTIONS:-1024};
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout ${NGINX_KEEPALIVE_TIMEOUT:-65};
        types_hash_max_size 2048;
        client_max_body_size ${NGINX_CLIENT_MAX_BODY_SIZE:-1m};
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript 
                   application/json application/javascript application/xml+rss 
                   application/atom+xml image/svg+xml;
        
        upstream backend {
            server ${BACKEND_HOST:-localhost}:${BACKEND_PORT:-8080};
            keepalive 32;
        }
        
        server {
            listen ${NGINX_PORT:-80};
            server_name ${SERVER_NAME:-localhost};
            
            location / {
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT:-60s};
                proxy_send_timeout ${PROXY_SEND_TIMEOUT:-60s};
                proxy_read_timeout ${PROXY_READ_TIMEOUT:-60s};
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }

  # 日志配置
  log4j2.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            </Console>
            <File name="FileAppender" fileName="/var/log/app/application.log">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
            </File>
        </Appenders>
        <Loggers>
            <Logger name="${APP_NAME:-my-app}" level="${LOG_LEVEL:-INFO}"/>
            <Root level="${ROOT_LOG_LEVEL:-WARN}">
                <AppenderRef ref="Console"/>
                <AppenderRef ref="FileAppender"/>
            </Root>
        </Loggers>
    </Configuration>

  # Prometheus 配置
  prometheus.yml: |
    global:
      scrape_interval: ${PROMETHEUS_SCRAPE_INTERVAL:-15s}
      evaluation_interval: ${PROMETHEUS_EVALUATION_INTERVAL:-15s}
    
    scrape_configs:
      - job_name: '${APP_NAME:-my-app}'
        static_configs:
          - targets: ['localhost:${METRICS_PORT:-9090}']
        scrape_interval: ${APP_SCRAPE_INTERVAL:-30s}
        metrics_path: ${METRICS_PATH:-/metrics}

  # 健康检查脚本
  health-check.sh: |
    #!/bin/bash
    set -e
    
    # 健康检查端点
    HEALTH_URL="http://localhost:${HEALTH_CHECK_PORT:-8080}${HEALTH_CHECK_PATH:-/health}"
    
    # 执行健康检查
    response=$(curl -s -w "%{http_code}" -o /dev/null "$HEALTH_URL" || echo "000")
    
    if [ "$response" = "200" ]; then
        echo "Health check passed"
        exit 0
    else
        echo "Health check failed with status: $response"
        exit 1
    fi

  # 启动脚本
  start.sh: |
    #!/bin/bash
    set -e
    
    echo "Starting ${APP_NAME:-my-app}..."
    echo "Environment: ${ENVIRONMENT:-development}"
    echo "Version: ${APP_VERSION:-v1.0.0}"
    
    # 等待依赖服务
    if [ -n "${WAIT_FOR_SERVICES}" ]; then
        echo "Waiting for services: ${WAIT_FOR_SERVICES}"
        for service in ${WAIT_FOR_SERVICES//,/ }; do
            echo "Waiting for $service..."
            until nc -z ${service%:*} ${service#*:}; do
                echo "Service $service is not ready, waiting..."
                sleep 2
            done
            echo "Service $service is ready"
        done
    fi
    
    # 执行数据库迁移（如果需要）
    if [ "${RUN_MIGRATIONS:-false}" = "true" ]; then
        echo "Running database migrations..."
        # Add migration command here
    fi
    
    # 启动应用
    echo "Starting application..."
    exec "$@"

  # 环境特定配置
  ${ENVIRONMENT:-development}.env: |
    # Environment specific configuration
    NODE_ENV=${ENVIRONMENT:-development}
    DEBUG=${DEBUG_MODE:-false}
    
    # Database
    DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@localhost:5432/myapp}
    
    # Cache
    REDIS_URL=${REDIS_URL:-redis://localhost:6379}
    
    # External Services
    API_BASE_URL=${API_BASE_URL:-https://api.example.com}
    CDN_URL=${CDN_URL:-https://cdn.example.com}
    
    # Feature Flags
    FEATURE_NEW_UI=${FEATURE_NEW_UI:-false}
    FEATURE_ANALYTICS=${FEATURE_ANALYTICS:-true}

binaryData:
  # 证书文件（Base64 编码）
  # ca.crt: ${CA_CERT_BASE64:-}
  # tls.crt: ${TLS_CERT_BASE64:-}
immutable: ${CONFIG_IMMUTABLE:-false}
