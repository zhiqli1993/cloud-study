# EnvoyFilter Template - Rate Limiting
# EnvoyFilter 模板 - 速率限制配置
# 作用：在 Envoy 代理级别实现请求速率限制，防止服务过载，提供精细化的流量控制
apiVersion: networking.istio.io/v1alpha3  # API 版本：EnvoyFilter 使用 v1alpha3 版本
kind: EnvoyFilter  # 资源类型：EnvoyFilter，用于自定义 Envoy 代理配置
metadata:
  name: rate-limit-filter  # 速率限制过滤器名称
  namespace: default  # 命名空间
spec:
  workloadSelector:  # 工作负载选择器：指定应用此过滤器的工作负载
    labels:
      app: example-app  # 标签选择器：选择带有 app=example-app 标签的 Pod
  configPatches:  # 配置补丁：修改 Envoy 代理的配置
  - applyTo: HTTP_FILTER  # 应用目标：HTTP 过滤器链
    match:  # 匹配条件：指定在哪里应用此配置
      context: SIDECAR_INBOUND  # 上下文：入站 Sidecar 代理
      listener:  # 监听器匹配
        filterChain:  # 过滤器链
          filter:
            name: "envoy.filters.network.http_connection_manager"  # HTTP 连接管理器
    patch:  # 补丁操作
      operation: INSERT_BEFORE  # 操作类型：在指定位置之前插入
      value:  # 插入的过滤器配置
        name: envoy.filters.http.local_ratelimit  # 本地速率限制过滤器
        typed_config:  # 类型化配置
          "@type": type.googleapis.com/udpa.type.v1.TypedStruct  # 配置类型
          type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
          value:
            stat_prefix: local_rate_limiter  # 统计前缀：用于监控指标命名
            token_bucket:  # 令牌桶算法配置
              max_tokens: 100  # 最大令牌数：桶的容量
              tokens_per_fill: 100  # 每次填充的令牌数
              fill_interval: 60s  # 填充间隔：每60秒填充一次令牌
            filter_enabled:  # 过滤器启用配置
              runtime_key: local_rate_limit_enabled  # 运行时键：用于动态控制
              default_value:  # 默认值：100% 启用
                numerator: 100  # 分子
                denominator: HUNDRED  # 分母
            filter_enforced:  # 过滤器强制执行配置
              runtime_key: local_rate_limit_enforced  # 运行时键
              default_value:  # 默认值：100% 强制执行
                numerator: 100
                denominator: HUNDRED
---
# EnvoyFilter Template - Wasm Plugin
# EnvoyFilter 模板 - WebAssembly 插件配置
# 作用：集成自定义 WebAssembly 插件，提供高性能的请求处理逻辑扩展
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: wasm-plugin-filter  # WebAssembly 插件过滤器名称
  namespace: default
spec:
  workloadSelector:  # 工作负载选择器
    labels:
      app: example-app  # 应用标签选择器
  configPatches:
  - applyTo: HTTP_FILTER  # 应用到 HTTP 过滤器
    match:
      context: SIDECAR_INBOUND  # 入站 Sidecar 上下文
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE  # 插入操作
      value:
        name: envoy.filters.http.wasm  # WebAssembly HTTP 过滤器
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: "custom_plugin"  # 插件名称：自定义插件标识符
            root_id: "custom_plugin"  # 根 ID：WebAssembly 模块的根上下文ID
            configuration:  # 插件配置：传递给 WebAssembly 模块的配置
              "@type": type.googleapis.com/google.protobuf.StringValue
              value: |
                {
                  "config_key": "config_value"
                }
            vm_config:  # 虚拟机配置：WebAssembly 运行时设置
              vm_id: "custom_plugin"  # 虚拟机 ID
              runtime: "envoy.wasm.runtime.v8"  # 运行时：使用 V8 JavaScript 引擎
              code:  # 代码配置
                local:  # 本地代码
                  inline_string: |
                    // Your WebAssembly code here
                    // 在此处添加您的 WebAssembly 代码
---
# EnvoyFilter Template - Lua Script
# EnvoyFilter 模板 - Lua 脚本配置
# 作用：使用 Lua 脚本进行轻量级的请求/响应处理，适合简单的逻辑处理和调试
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-script-filter  # Lua 脚本过滤器名称
  namespace: default
spec:
  workloadSelector:
    labels:
      app: example-app  # 目标应用选择器
  configPatches:
  - applyTo: HTTP_FILTER  # 应用到 HTTP 过滤器
    match:
      context: SIDECAR_INBOUND  # 入站 Sidecar 上下文
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE  # 在指定位置前插入
      value:
        name: envoy.filters.http.lua  # Lua HTTP 过滤器
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inline_code: |  # 内联 Lua 代码：直接在配置中定义脚本
            function envoy_on_request(request_handle)
              -- Add custom header
              -- 添加自定义请求头
              request_handle:headers():add("x-custom-header", "added-by-lua")
              
              -- Log request
              -- 记录请求日志
              request_handle:logInfo("Request from: " .. request_handle:headers():get(":authority"))
            end
            
            function envoy_on_response(response_handle)
              -- Add response header
              -- 添加响应头，包含响应时间戳
              response_handle:headers():add("x-response-time", os.time())
            end
---
# EnvoyFilter Template - Circuit Breaker
# EnvoyFilter 模板 - 熔断器配置
# 作用：在集群级别配置熔断器，防止上游服务过载，提供故障隔离和快速失败机制
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: circuit-breaker-filter  # 熔断器过滤器名称
  namespace: default
spec:
  workloadSelector:
    labels:
      app: example-app  # 应用选择器
  configPatches:
  - applyTo: CLUSTER  # 应用到集群配置
    match:
      context: SIDECAR_OUTBOUND  # 出站 Sidecar 上下文
    patch:
      operation: MERGE  # 合并操作：将配置合并到现有集群配置中
      value:
        circuit_breakers:  # 熔断器配置
          thresholds:  # 阈值设置：定义不同优先级的熔断阈值
          - priority: DEFAULT  # 优先级：默认优先级的连接
            max_connections: 100  # 最大连接数：限制并发连接数
            max_pending_requests: 50  # 最大挂起请求数：限制等待处理的请求数
            max_requests: 200  # 最大请求数：限制并发请求总数
            max_retries: 3  # 最大重试次数：限制重试请求数
            track_remaining: true  # 跟踪剩余：监控剩余可用连接数
          - priority: HIGH  # 优先级：高优先级连接（通常用于重要流量）
            max_connections: 200  # 高优先级连接的更高限制
            max_pending_requests: 100
            max_requests: 400
            max_retries: 5
---
# EnvoyFilter Template - Custom Access Log
# EnvoyFilter 模板 - 自定义访问日志配置
# 作用：自定义 Envoy 的访问日志格式，提供详细的请求/响应信息用于监控和调试
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: custom-access-log  # 自定义访问日志过滤器名称
  namespace: default
spec:
  workloadSelector:
    labels:
      app: example-app  # 目标应用选择器
  configPatches:
  - applyTo: NETWORK_FILTER  # 应用到网络过滤器
    match:
      listener:  # 监听器匹配
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"  # HTTP 连接管理器
    patch:
      operation: MERGE  # 合并操作
      value:
        typed_config:  # 类型化配置
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:  # 访问日志配置
          - name: envoy.access_loggers.file  # 文件访问日志记录器
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"  # 日志输出路径：标准输出
              format: |  # 自定义日志格式：包含详细的请求和响应信息
                [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                # 格式说明：
                # %START_TIME% - 请求开始时间
                # %REQ(:METHOD)% - HTTP 方法
                # %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% - 原始路径或当前路径
                # %PROTOCOL% - 协议版本
                # %RESPONSE_CODE% - HTTP 响应码
                # %RESPONSE_FLAGS% - 响应标志
                # %BYTES_RECEIVED% - 接收字节数
                # %BYTES_SENT% - 发送字节数
                # %DURATION% - 请求持续时间
                # %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% - 上游服务响应时间
                # %REQ(X-FORWARDED-FOR)% - 转发IP地址
                # %REQ(USER-AGENT)% - 用户代理
                # %REQ(X-REQUEST-ID)% - 请求ID
                # %REQ(:AUTHORITY)% - 请求权威
                # %UPSTREAM_HOST% - 上游主机
