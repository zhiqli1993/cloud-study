# Gateway Template - HTTP/HTTPS Ingress
# Gateway 模板 - HTTP/HTTPS 入口网关配置
# 作用：定义 Istio 服务网格的入口点，管理进入服务网格的外部流量
apiVersion: networking.istio.io/v1beta1  # API 版本，指定使用的 Istio 网络 API 版本
kind: Gateway  # 资源类型：Gateway，用于配置负载均衡器的入口点
metadata:
  name: example-gateway  # Gateway 名称，集群内唯一标识符
  namespace: default  # 命名空间，指定 Gateway 部署的 Kubernetes 命名空间
spec:
  selector:
    istio: ingressgateway  # 选择器：指定哪个 Istio 入口网关实例来处理此配置
  servers:  # 服务器配置列表，定义监听的端口和协议
  - port:
      number: 80  # 端口号：监听 HTTP 流量的端口
      name: http  # 端口名称：便于识别和引用
      protocol: HTTP  # 协议类型：处理 HTTP 协议的流量
    hosts:  # 主机列表：定义此端口接受的主机名/域名
    - example.com  # 主域名
    - api.example.com  # API 子域名
    tls:
      httpsRedirect: true  # HTTPS 重定向：自动将 HTTP 请求重定向到 HTTPS
  - port:
      number: 443  # 端口号：监听 HTTPS 流量的端口
      name: https  # 端口名称：HTTPS 端口标识
      protocol: HTTPS  # 协议类型：处理 HTTPS 协议的流量
    hosts:  # 主机列表：定义此 HTTPS 端口接受的主机名
    - example.com
    - api.example.com
    tls:
      mode: SIMPLE  # TLS 模式：简单 TLS 终止，网关处理 TLS 加密/解密
      credentialName: example-tls-cert  # 凭证名称：指向包含 TLS 证书的 Kubernetes Secret
---
# Gateway Template - TCP/TLS Gateway
# Gateway 模板 - TCP/TLS 网关配置
# 作用：为非 HTTP 协议（如数据库连接）提供入口访问，支持 TCP 和 TLS 加密
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: tcp-gateway  # TCP 网关名称
  namespace: default
spec:
  selector:
    istio: ingressgateway  # 使用 Istio 入口网关处理 TCP 流量
  servers:
  - port:
      number: 3306  # MySQL 默认端口
      name: mysql  # 端口名称：标识 MySQL 服务
      protocol: TCP  # 协议类型：原始 TCP 协议，无应用层处理
    hosts:
    - mysql.example.com  # MySQL 服务的主机名
  - port:
      number: 3307  # 自定义 MySQL TLS 端口
      name: mysql-tls  # 端口名称：加密的 MySQL 连接
      protocol: TLS  # 协议类型：TLS 加密的 TCP 连接
    hosts:
    - secure-mysql.example.com  # 安全 MySQL 服务的主机名
    tls:
      mode: SIMPLE  # TLS 模式：服务器端 TLS 终止
      credentialName: mysql-tls-cert  # MySQL TLS 证书凭证名称
---
# Gateway Template - mTLS Gateway
# Gateway 模板 - 双向 TLS 认证网关配置
# 作用：实现双向 TLS 认证，确保客户端和服务器都经过身份验证，提供最高级别的安全性
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: mtls-gateway  # 双向 TLS 网关名称
  namespace: default
spec:
  selector:
    istio: ingressgateway  # 选择处理双向 TLS 的入口网关
  servers:
  - port:
      number: 8443  # 自定义 HTTPS 端口，用于双向 TLS 认证
      name: https-mtls  # 端口名称：双向 TLS HTTPS 服务
      protocol: HTTPS  # 协议类型：HTTPS 协议
    hosts:
    - secure.example.com  # 高安全级别服务的主机名
    tls:
      mode: MUTUAL  # TLS 模式：双向认证，客户端和服务器都需要提供证书
      credentialName: mtls-cert  # 服务器证书凭证名称
      caCertificates: /etc/ssl/certs/ca.pem  # CA 证书路径：用于验证客户端证书的根证书
---
# Gateway Template - Multi-Protocol Gateway
# Gateway 模板 - 多协议网关配置
# 作用：在单个网关中支持多种协议（HTTP、HTTPS、gRPC、MongoDB），简化网关管理
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: multi-protocol-gateway  # 多协议网关名称
  namespace: default
spec:
  selector:
    istio: ingressgateway  # 选择支持多协议的入口网关
  servers:
  - port:
      number: 80  # HTTP 端口
      name: web-http  # 端口名称：Web HTTP 服务
      protocol: HTTP  # 协议类型：标准 HTTP 协议
    hosts:
    - web.example.com  # Web 应用的主机名
  - port:
      number: 443  # HTTPS 端口
      name: web-https  # 端口名称：Web HTTPS 服务
      protocol: HTTPS  # 协议类型：加密的 HTTP 协议
    hosts:
    - web.example.com  # Web 应用的安全主机名
    tls:
      mode: SIMPLE  # TLS 模式：服务器端 TLS 终止
      credentialName: web-tls-cert  # Web 应用的 TLS 证书凭证
  - port:
      number: 9080  # gRPC 服务端口
      name: grpc  # 端口名称：gRPC 服务标识
      protocol: GRPC  # 协议类型：Google RPC 协议，用于高性能微服务通信
    hosts:
    - grpc.example.com  # gRPC 服务的主机名
  - port:
      number: 27017  # MongoDB 默认端口
      name: mongo  # 端口名称：MongoDB 数据库服务
      protocol: MONGO  # 协议类型：MongoDB 专用协议
    hosts:
    - mongo.example.com  # MongoDB 服务的主机名
